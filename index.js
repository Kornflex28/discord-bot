var emojis = [
	'üòÑ','üòÉ','üòÄ','üòä','‚ò∫','üòâ','üòç','üòò','üòö','üòó','üòô','üòú','üòù','üòõ','üò≥','üòÅ','üòî','üòå','üòí','üòû','üò£','üò¢','üòÇ','üò≠','üò™','üò•','üò∞','üòÖ','üòì','üò©','üò´','üò®','üò±','üò†','üò°','üò§','üòñ','üòÜ','üòã','üò∑','üòé','üò¥','üòµ','üò≤','üòü','üò¶','üòß','üòà','üëø','üòÆ','üò¨','üòê','üòï','üòØ','üò∂','üòá','üòè','üòë','üë≤','üë≥','üëÆ','üë∑','üíÇ','üë∂','üë¶','üëß','üë®','üë©','üë¥','üëµ','üë±','üëº','üë∏','üò∫','üò∏','üòª','üòΩ','üòº','üôÄ','üòø','üòπ','üòæ','üëπ','üë∫','üôà','üôâ','üôä','üíÄ','üëΩ','üí©','üî•','‚ú®','üåü','üí´','üí•','üí¢','üí¶','üíß','üí§','üí®','üëÇ','üëÄ','üëÉ','üëÖ','üëÑ','üëç','üëé','üëå','üëä','‚úä','‚úå','üëã','‚úã','üëê','üëÜ','üëá','üëâ','üëà','üôå','üôè','‚òù','üëè','üí™','üö∂','üèÉ','üíÉ','üë´','üë™','üë¨','üë≠','üíè','üíë','üëØ','üôÜ','üôÖ','üíÅ','üôã','üíÜ','üíá','üíÖ','üë∞','üôé','üôç','üôá','üé©','üëë','üëí','üëü','üëû','üë°','üë†','üë¢','üëï','üëî','üëö','üëó','üéΩ','üëñ','üëò','üëô','üíº','üëú','üëù','üëõ','üëì','üéÄ','üåÇ','üíÑ','üíõ','üíô','üíú','üíö','‚ù§','üíî','üíó','üíì','üíï','üíñ','üíû','üíò','üíå','üíã','üíç','üíé','üë§','üë•','üí¨','üë£','üí≠','üê∂','üê∫','üê±','üê≠','üêπ','üê∞','üê∏','üêØ','üê®','üêª','üê∑','üêΩ','üêÆ','üêó','üêµ','üêí','üê¥','üêë','üêò','üêº','üêß','üê¶','üê§','üê•','üê£','üêî','üêç','üê¢','üêõ','üêù','üêú','üêû','üêå','üêô','üêö','üê†','üêü','üê¨','üê≥','üêã','üêÑ','üêè','üêÄ','üêÉ','üêÖ','üêá','üêâ','üêé','üêê','üêì','üêï','üêñ','üêÅ','üêÇ','üê≤','üê°','üêä','üê´','üê™','üêÜ','üêà','üê©','üêæ','üíê','üå∏','üå∑','üçÄ','üåπ','üåª','üå∫','üçÅ','üçÉ','üçÇ','üåø','üåæ','üçÑ','üåµ','üå¥','üå≤','üå≥','üå∞','üå±','üåº','üåê','üåû','üåù','üåö','üåë','üåí','üåì','üåî','üåï','üåñ','üåó','üåò','üåú','üåõ','üåô','üåç','üåé','üåè','üåã','üåå','üå†','‚≠ê','‚òÄ','‚õÖ','‚òÅ','‚ö°','‚òî','‚ùÑ','‚õÑ','üåÄ','üåÅ','üåà','üåä','üéç','üíù','üéé','üéí','üéì','üéè','üéÜ','üéá','üéê','üéë','üéÉ','üëª','üéÖ','üéÑ','üéÅ','üéã','üéâ','üéä','üéà','üéå','üîÆ','üé•','üì∑','üìπ','üìº','üíø','üìÄ','üíΩ','üíæ','üíª','üì±','‚òé','üìû','üìü','üì†','üì°','üì∫','üìª','üîä','üîâ','üîà','üîá','üîî','üîï','üì¢','üì£','‚è≥','‚åõ','‚è∞','‚åö','üîì','üîí','üîè','üîê','üîë','üîé','üí°','üî¶','üîÜ','üîÖ','üîå','üîã','üîç','üõÅ','üõÄ','üöø','üöΩ','üîß','üî©','üî®','üö™','üö¨','üí£','üî´','üî™','üíä','üíâ','üí∞','üí¥','üíµ','üí∑','üí∂','üí≥','üí∏','üì≤','üìß','üì•','üì§','‚úâ','üì©','üì®','üìØ','üì´','üì™','üì¨','üì≠','üìÆ','üì¶','üìù','üìÑ','üìÉ','üìë','üìä','üìà','üìâ','üìú','üìã','üìÖ','üìÜ','üìá','üìÅ','üìÇ','‚úÇ','üìå','üìé','‚úí','‚úè','üìè','üìê','üìï','üìó','üìò','üìô','üìì','üìî','üìí','üìö','üìñ','üîñ','üìõ','üî¨','üî≠','üì∞','üé®','üé¨','üé§','üéß','üéº','üéµ','üé∂','üéπ','üéª','üé∫','üé∑','üé∏','üëæ','üéÆ','üÉè','üé¥','üÄÑ','üé≤','üéØ','üèà','üèÄ','‚öΩ','‚öæ','üéæ','üé±','üèâ','üé≥','‚õ≥','üöµ','üö¥','üèÅ','üèá','üèÜ','üéø','üèÇ','üèä','üèÑ','üé£','‚òï','üçµ','üç∂','üçº','üç∫','üçª','üç∏','üçπ','üç∑','üç¥','üçï','üçî','üçü','üçó','üçñ','üçù','üçõ','üç§','üç±','üç£','üç•','üçô','üçò','üçö','üçú','üç≤','üç¢','üç°','üç≥','üçû','üç©','üçÆ','üç¶','üç®','üçß','üéÇ','üç∞','üç™','üç´','üç¨','üç≠','üçØ','üçé','üçè','üçä','üçã','üçí','üçá','üçâ','üçì','üçë','üçà','üçå','üçê','üçç','üç†','üçÜ','üçÖ','üåΩ','üè†','üè°','üè´','üè¢','üè£','üè•','üè¶','üè™','üè©','üè®','üíí','‚õ™','üè¨','üè§','üåá','üåÜ','üèØ','üè∞','‚õ∫','üè≠','üóº','üóæ','üóª','üåÑ','üåÖ','üåÉ','üóΩ','üåâ','üé†','üé°','‚õ≤','üé¢','üö¢','‚õµ','üö§','üö£','‚öì','üöÄ','‚úà','üí∫','üöÅ','üöÇ','üöä','üöâ','üöû','üöÜ','üöÑ','üöÖ','üöà','üöá','üöù','üöã','üöÉ','üöé','üöå','üöç','üöô','üöò','üöó','üöï','üöñ','üöõ','üöö','üö®','üöì','üöî','üöí','üöë','üöê','üö≤','üö°','üöü','üö†','üöú','üíà','üöè','üé´','üö¶','üö•','‚ö†','üöß','üî∞','‚õΩ','üèÆ','üé∞','‚ô®','üóø','üé™','üé≠','üìç','üö©','‚¨Ü','‚¨á','‚¨Ö','‚û°','üî†','üî°','üî§','‚Üó','‚Üñ','‚Üò','‚Üô','‚Üî','‚Üï','üîÑ','‚óÄ','‚ñ∂','üîº','üîΩ','‚Ü©','‚Ü™','‚Ñπ','‚è™','‚è©','‚è´','‚è¨','‚§µ','‚§¥','üÜó','üîÄ','üîÅ','üîÇ','üÜï','üÜô','üÜí','üÜì','üÜñ','üì∂','üé¶','üàÅ','üàØ','üà≥','üàµ','üà¥','üà≤','üâê','üàπ','üà∫','üà∂','üàö','üöª','üöπ','üö∫','üöº','üöæ','üö∞','üöÆ','üÖø','‚ôø','üö≠','üà∑','üà∏','üàÇ','‚ìÇ','üõÇ','üõÑ','üõÖ','üõÉ','üâë','„äô','„äó','üÜë','üÜò','üÜî','üö´','üîû','üìµ','üöØ','üö±','üö≥','üö∑','üö∏','‚õî','‚ú≥','‚ùá','‚ùé','‚úÖ','‚ú¥','üíü','üÜö','üì≥','üì¥','üÖ∞','üÖ±','üÜé','üÖæ','üí†','‚ûø','‚ôª','‚ôà','‚ôâ','‚ôä','‚ôã','‚ôå','‚ôç','‚ôé','‚ôè','‚ôê','‚ôë','‚ôí','‚ôì','‚õé','üîØ','üèß','üíπ','üí≤','üí±','¬©','¬Æ','‚Ñ¢','„ÄΩ','„Ä∞','üîù','üîö','üîô','üîõ','üîú','‚ùå','‚≠ï','‚ùó','‚ùì','‚ùï','‚ùî','üîÉ','üïõ','üïß','üïê','üïú','üïë','üïù','üïí','üïû','üïì','üïü','üïî','üï†','üïï','üïñ','üïó','üïò','üïô','üïö','üï°','üï¢','üï£','üï§','üï•','üï¶','‚úñ','‚ûï','‚ûñ','‚ûó','‚ô†','‚ô•','‚ô£','‚ô¶','üíÆ','üíØ','‚úî','‚òë','üîò','üîó','‚û∞','üî±','üî≤','üî≥','‚óº','‚óª','‚óæ','‚óΩ','‚ñ™','‚ñ´','üî∫','‚¨ú','‚¨õ','‚ö´','‚ö™','üî¥','üîµ','üîª','üî∂','üî∑','üî∏','üîπ'
];


const fs = require('fs');
require('dotenv').config();
const Discord = require('discord.js');
const { NlpManager } = require('node-nlp');
const nlpTools = require('./nlp/nlp_process.js')
const thoughts = './nlp/thoughts.txt';

const client = new Discord.Client();

client.commands = new Discord.Collection();
const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
    const command = require(`./commands/${file}`);
    client.commands.set(command.name, command);
}

const cooldowns = new Discord.Collection();


const manager = new NlpManager({ languages: ['fr'], forceNER: true, modelFileName: './nlp/dede_fr.nlp' });
// Adds the utterances and intents for the NLP
manager.addCorpus('./nlp/corpus-fr.json');

// Train and save the model.
(async () => {
    await manager.train();
})();


const minTime = 20 * 60 * 60 // 20 hours in s 
const maxTime = 72 * 60 * 60 // 72 hours in s
var interval = (Math.floor(Math.random() * (maxTime - minTime) ) + minTime) * 1000 ; // in ms
var msgs = [];
fs.readFile(thoughts ,'utf8', ((err, data) => {
    msgs = msgs.concat(data.split('\n'));
    })
);
var intervalId;


function startInterval(_interval,client,channelId,msgs) {
    // Store the id of the interval so we can clear it later
    intervalId = setInterval(function() {
        client.channels.fetch(channelId).then(channel => {
            channel.send(msgs[Math.floor(Math.random() * msgs.length)]);
            clearInterval(intervalId);
            interval = (Math.floor(Math.random() * (maxTime - minTime) ) + minTime) * 1000 ; // in ms
            msg = `\`\`\`ini\n [saucisse sent to ${channel.name}, new Interval = ${(interval/(1000*60*60)).toFixed(2)} h]\n\`\`\``
            sendToLogs(process.env.LOGS_CHANNEL_ID,msg)
            startInterval(interval,client,channelId,msgs);
        })
        .catch(console.error); // add error handling here
    }, _interval);
  }

function sendToLogs(LOGS_CHANNEL_ID,msg) {
    client.channels.fetch(LOGS_CHANNEL_ID).then(channel => {
        channel.send(msg)
    });
}

client.once('ready', () => {
    client.user.setPresence({ activity: { name: `les d√©s`, type: 'LISTENING' }, status: 'online' });
    console.log('Bot logged in!');

    startInterval(interval,client,process.env.OOPS_GENERAL_ID,msgs)
    readyMsg = `\`\`\`diff\n- Bot logged in! ${Date(Date.now()).toLocaleString()}\nInterval = ${(interval/(1000*60*60)).toFixed(2)} h\n\`\`\`<@${process.env.CREATOR_ID}>`;
    sendToLogs(process.env.LOGS_CHANNEL_ID,readyMsg)
});

// NEW MEMBER IN GUILD
client.on('guildMemberAdd', member => {
    // console.log(member);
	const channel = member.guild.channels.cache.find(ch => ch.name === 'general');
	if (!channel) return;
    channel.send(`Bienvenue chez les fous, ${member} ! Que dirais tu d'un petit lancer de d√©s pour f√™ter √ßa ?!`);
    n_dice = 5;
    dice = Array.from({ length: n_dice }, () => Math.floor(Math.random() * 6) + 1);
    die_emojis = dice.map(die => client.emojis.cache.find(emoji => emoji.name === `die${die}`));
    channel.send(`${die_emojis.join("")}`)
    guildAddMsg = `\`\`\`fix\n ${member.user.username} joined ${channel.name} in ${member.guild}\n\`\`\``
    sendToLogs(process.env.LOGS_CHANNEL_ID,guildAddMsg);
    
});

//JOINING VOICE CHANNEL
client.on('voiceStateUpdate', (oldMember, newMember) => {

    const targetVoiceChannel = 'LoL';
    const targetMessageChannel = 'general';
    const message_prob = 0.25;
    let newUserChannel = newMember.channel
    let oldUserChannel = oldMember.channel
    
    if(oldUserChannel === null && newUserChannel !== null) {
        if (newUserChannel.name === targetVoiceChannel && Math.random() < message_prob) {
            const channel = newMember.member.guild.channels.cache.find(ch => ch.name === targetMessageChannel);
            const lines = ['Et c\'est reparti...', 'Fid√®le √† soi m√™me', 'Pour changer', 'Ah toi aussi ?', 'Mais NAN ?!', 'Ind√©modable'];
            channel.send(`${lines[Math.floor(Math.random()*lines.length)]} <@${newMember.member.user.id}> arrive sur le vocal ${targetVoiceChannel}`);
            voiceAddMsg = `\`\`\`bash\n "${newMember.member.user.username} joined ${targetVoiceChannel} in vocal in ${newMember.member.guild}"\n\`\`\``
            sendToLogs(process.env.LOGS_CHANNEL_ID,voiceAddMsg);
        }
    }
    
  })

// MESSAGE 
client.on('message', message => {

    if (message.content === '!!testjoin' && message.author.id == process.env.CREATOR_ID) {
		client.emit('guildMemberAdd', message.member);
    }
    
    if (message.content.startsWith('mergez') && message.author.id == process.env.CREATOR_ID) {
        const messageContent = message.content.slice('mergez'.length +1).trim();
        // console.log(`"${messageContent}"`)
		client.channels.fetch(process.env.OOPS_GENERAL_ID).then(channel => {
            if (messageContent === "") {
                channel.send(msgs[Math.floor(Math.random() * msgs.length)]);
            } else {
                channel.send(messageContent);
            }
            msg = `\`\`\`ini\n [mergez sent to ${channel.name}]\n\`\`\``
            sendToLogs(process.env.LOGS_CHANNEL_ID,msg)
        })
    }

    if (message.author.bot) { return; }

    if (!message.author.bot) {

        console.log(message.content)
        const react_prob = Math.exp(-1);

        // reactions handling 
        if (['vie', 'damso'].some(elem => message.content.toLowerCase().includes(elem))) {
            message.react('üññ');
        }

        if (['maisnan', 'mais nan'].some(elem => message.content.toLowerCase().includes(elem))) {
            message.react('ü§Ø');
            message.reply('MAIS NAN ?!!');
        }

        if (Math.random() < react_prob) {
            message.react(emojis[Math.floor(Math.random() * emojis.length)]);
        }

        // bot mentions handling
        bot_id = client.user.id;

        if (message.content.startsWith(`<@!${bot_id}>`) || message.content.startsWith(`<@${bot_id}>`)) {

            const messageContent = message.content.slice(bot_id.length + 4).trim();
            mentionMsg = `\`\`\`diff\n+ Bot mention by ${message.author.username} in ${message.channel.name}, ${message.guild.name}\n ${messageContent}\n\`\`\``
            sendToLogs(process.env.LOGS_CHANNEL_ID,mentionMsg)

            nlpTools.process_message(manager, message, messageContent);
        }

        // commands handling
        if (message.content.startsWith(process.env.BOT_PREFIX)) {

            const args = message.content.slice(process.env.BOT_PREFIX.length).trim().split(/ +/);
            const commandName = args.shift().toLowerCase();

            const command = client.commands.get(commandName)
                || client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));

            if (!command) {
                return message.reply(`d√©sol√© mais \`${commandName}\` n'est pas encore une de mes faces, si tu as une id√©e de g√©nie tu peux toujours envoyer un message √† <@${process.env.CREATOR_ID}> (gros tocard askip).`);
            };

            if (command.guildOnly && message.channel.type === 'dm') {
                return message.reply(`Je ne peux pas utiliser la face \`${commandName}\` en DM (d√©sol√©). üò¨`);
            }

            if (command.args && !args.length) {
                let reply = 'd√©sol√© mais tu n\'as pas donn√© d\'argument. C\'est scandaleux !';

                if (command.usage) {
                    reply += `\nL'utilisation correcte serait: \`${process.env.BOT_PREFIX}${command.name} ${command.usage}\``;
                }

                return message.reply(reply);
            }

            if (!cooldowns.has(command.name)) {
                cooldowns.set(command.name, new Discord.Collection());
            }

            const now = Date.now();
            const timestamps = cooldowns.get(command.name);
            const cooldownAmount = (command.cooldown || parseInt(process.env.DEFAULT_COOLDOWN)) * 1000;

            if (timestamps.has(message.author.id)) {
                const expirationTime = timestamps.get(message.author.id) + cooldownAmount;

                if (now < expirationTime) {
                    const timeLeft = (expirationTime - now) / 1000;
                    return message.reply(`my brooo, ne soit pas impatient ü§†! Attends un peu, encore ${timeLeft.toFixed(1)} s de r√©utiliser ma face \`${command.name}\`.`);
                }
            }

            timestamps.set(message.author.id, now);
            setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);

            try {
                command.execute(message, args);
            } catch (error) {
                console.error(error);
                errorMsg = `\`\`\`css\n[Bot error]\n${error}}\n\`\`\``;
                sendToLogs(process.env.LOGS_CHANNEL_ID,errorMsg)
                message.reply(`oups j\'ai du √™tre mal lanc√© ü§ï, il y a eu une erreur lors de l\'√©x√©cution.\n\`${error}\``);
            }

            // console.log(message)
            console.log(message.author.username, message.content);
            commandMsg = `\`\`\`diff\n+ Command msg by ${message.author.username} in ${message.channel.type === 'dm' ? "DM" : message.channel.name}, ${message.guild.name}\n ${message.content}\n\`\`\``;
            sendToLogs(process.env.LOGS_CHANNEL_ID,commandMsg)
        }
    }

});


client.login(process.env.BOT_TOKEN);
